#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# RERO ILS
# Copyright (C) 2019 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

DATA_PATH=$(pipenv --where)/data

# Parameters description:
#  --create_items_holdings_small:
#       used for create only the items and holdings files for the 'small' documents file
#  --create_items_holdings_big:
#       used for create only the items and holdings files for the 'big' documents file
#  --deployment:
#       used for deploy the 'big' files

RED='\033[0;31m'
GREEN='\033[0;0;32m'
NC='\033[0m' # No Color

display_error_message () {
	echo -e "${RED}$1${NC}" 1>&2
}

display_success_message () {
    echo -e "${GREEN}$1${NC}" 1>&2
}

DEPLOYMENT=false
CREATE_ITEMS_HOLDINGS_SMALL=false
CREATE_ITEMS_HOLDINGS_BIG=false
STOP_EXECUTION=true

# options may be followed by one colon to indicate they have a required argument
if ! options=$(getopt -o dsb -l deployment,create_items_holdings_small,create_items_holdings_big -- "$@")
then
    # something went wrong, getopt will put out an error message for us
    exit 1
fi

while [ $# -gt 0 ]
do
    case $1 in
    -d|--deployment) DEPLOYMENT=true ;;
    -s|--create_items_holdings_small) CREATE_ITEMS_HOLDINGS_SMALL=true ;;
    -b|--create_items_holdings_big) CREATE_ITEMS_HOLDINGS_BIG=true ;;
    -c|--continue) STOP_EXECUTION=false ;;
    (--) shift; break;;
    (-*) display_error_message "$0: error - unrecognized option $1"; exit 1;;
    (*) break;;
    esac
    shift
done

if $CREATE_ITEMS_HOLDINGS_SMALL && $CREATE_ITEMS_HOLDINGS_BIG
then
    display_error_message "Error - chose option for 'small' or 'big' documents generation"
    exit 1
fi

if $CREATE_ITEMS_HOLDINGS_SMALL || $CREATE_ITEMS_HOLDINGS_BIG
then
    if $DEPLOYMENT
    then
        display_error_message "Error - chose deployment option only"
        exit 1
    fi
fi

if $CREATE_ITEMS_HOLDINGS_BIG
then
    # set DEPLOYMENT to true in order to use big documents file
    DEPLOYMENT=true
fi

# Purge celery
pipenv run celery purge -A invenio_app.celery -f
# Clean redis
pipenv run invenio shell --no-term-title -c "import redis; redis.StrictRedis.from_url(app.config['CACHE_REDIS_URL']).flushall(); print('Cache cleared')"
pipenv run invenio db destroy --yes-i-know
pipenv run invenio db init create
pipenv run invenio index queue purge delete
set -e
pipenv run invenio index destroy --force --yes-i-know
# Override index init to load templates before mapping
pipenv run invenio utils init --force
# pipenv run invenio index init --force
pipenv run invenio index queue init
# Delete invenio_circulations index
pipenv run invenio index delete loans-loan-v1.0.0 --force --yes-i-know

# Create admin role to restrict access
pipenv run invenio roles create admin
pipenv run invenio access allow superuser-access role admin

# create new user
pipenv run invenio users create -a admin@rero.ch --password administrator

# confirm users
pipenv run invenio users confirm admin@rero.ch

# create roles
pipenv run invenio roles create -d "Admins Group" admins
pipenv run invenio roles create -d "Super Users Group" superusers

# create a role for users qualified as a patron
pipenv run invenio roles create -d "Patron" patron

# create a role for users qualified as a staff library
pipenv run invenio roles create -d "Librarian" librarian

# create a role for users qualified as a System librarian
pipenv run invenio roles create -d "System Librarian" system_librarian

# grant accesses to action roles
pipenv run invenio access allow admin-access role admins
pipenv run invenio access allow superuser-access role superusers

# grant roles to users
pipenv run invenio roles add admin@rero.ch admins
pipenv run invenio roles add admin@rero.ch superusers

display_success_message "Organisations:"
pipenv run invenio fixtures create --pid_type org ${DATA_PATH}/organisations.json  --append
pipenv run invenio index reindex -t org --yes-i-know
display_success_message "Libraries:"
pipenv run invenio fixtures create --pid_type lib ${DATA_PATH}/libraries.json
pipenv run invenio index reindex -t lib --yes-i-know
display_success_message "Locations:"
pipenv run invenio fixtures create --pid_type loc ${DATA_PATH}/locations.json  --append
pipenv run invenio index reindex -t loc --yes-i-know
display_success_message "Item types:"
pipenv run invenio fixtures create --pid_type itty ${DATA_PATH}/item_types.json  --append
pipenv run invenio index reindex -t itty --yes-i-know
display_success_message "Patron types:"
pipenv run invenio fixtures create --pid_type ptty ${DATA_PATH}/patron_types.json
pipenv run invenio index reindex -t ptty --yes-i-know
display_success_message "Circulation policies:"
pipenv run invenio fixtures create --pid_type cipo ${DATA_PATH}/circulation_policies.json
pipenv run invenio index reindex -t cipo --yes-i-know
pipenv run invenio index run --raise-on-error

pipenv run invenio fixtures import_users ${DATA_PATH}/users.json -v

# # to generate data file
# pipenv run invenio fixtures create_items -c 10000 -i 5 -t ${DATA_PATH}/items.json -h ${DATA_PATH}/holdings.json
# pipenv run flask utils check_json -r data/holdings.json

# # Marc to xml transformation
# yaz-marcdump -o marcxml data/documents_big.mrc > data/documents_big.xml

# # xml to json transformation for rero marcxml records
# pipenv run dojson -i ${DATA_PATH}/documents_big.xml -l marcxml -d pjson do marc21tojson > ${DATA_PATH}/documents_big.json
# pipenv run invenio utils validate data/documents_big.json documents document-v0.0.1.json -s documents_big_errors.json
# pipenv run dojson -i ${DATA_PATH}/documents_small.xml -l marcxml -d pjson do marc21tojson > ${DATA_PATH}/documents_small.json
# pipenv run invenio utils validate data/documents_small.json documents document-v0.0.1.json -s documents_small_errors.json

if $DEPLOYMENT
then
    DOCUMENTS=${DATA_PATH}/documents_big.json
    ITEMS=${DATA_PATH}/items_big.json
    HOLDINGS=${DATA_PATH}/holdings_big.json
else
    DOCUMENTS=${DATA_PATH}/documents_small.json
    ITEMS=${DATA_PATH}/items_small.json
    HOLDINGS=${DATA_PATH}/holdings_small.json
fi

display_success_message "Documents:"
echo -e ${DOCUMENTS}
pipenv run invenio fixtures create --pid_type doc --schema 'http://ils.rero.ch/schema/documents/document-v0.0.1.json' ${DOCUMENTS}

if $CREATE_ITEMS_HOLDINGS_SMALL
then
    # to generate small items file small documents must exist in DB
    pipenv run invenio fixtures create_items -i 2 -t ${DATA_PATH}/items_small.json -h ${DATA_PATH}/holdings_small.json
    display_success_message "Creation of items and holdings done for 'small' documents done."
    if $STOP_EXECUTION
    then
        exit 0
    fi
fi

if $CREATE_ITEMS_HOLDINGS_BIG
then
    # to generate big items file big documents must exist in DB
    pipenv run invenio fixtures create_items -i 2 -t ${DATA_PATH}/items_big.json -h ${DATA_PATH}/holdings_big.json
    display_success_message "Creation of items and holdings done for 'big' documents done."
    if $STOP_EXECUTION
    then
        exit 0
    fi
fi

display_success_message "Holdings:"
echo -e ${HOLDINGS}

pipenv run invenio fixtures create --pid_type hold --schema 'http://ils.rero.ch/schema/holdings/holding-v0.0.1.json' ${HOLDINGS} --append

pipenv run invenio index reindex -t hold --yes-i-know
pipenv run invenio index run -c 4 --raise-on-error

display_success_message "Items:"
echo -e ${ITEMS}

pipenv run invenio fixtures create --pid_type item --schema 'http://ils.rero.ch/schema/items/item-v0.0.1.json' ${ITEMS}  --append

# index items
pipenv run invenio index reindex -t item --yes-i-know
pipenv run invenio index run -c 4 --raise-on-error

# index documents
pipenv run invenio index reindex -t doc --yes-i-know
pipenv run invenio index run -c 4 --raise-on-error

# # create circulation transactions
display_success_message "Circulation transactions:"
pipenv run invenio fixtures create_loans --fee ${DATA_PATH}/loans.json

# # OAI configuration
pipenv run invenio oaiharvester initconfig ${DATA_PATH}/oaisources.yml
if $DEPLOYMENT
then
    # start oai harvesting asynchrone: beats must be running
    pipenv run invenio oaiharvester harvest -n ebooks -q -k
else
    display_success_message "For ebooks harvesting run:"
    echo "pipenv run invenio oaiharvester harvest -n ebooks -a max=100 -q"
fi

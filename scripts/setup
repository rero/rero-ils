#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# RERO ILS
# Copyright (C) 2019 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

RED='\033[0;31m'
GREEN='\033[0;0;32m'
NC='\033[0m' # No Color

DATA_PATH=$(pipenv --where)/data
# Purge celery
pipenv run celery purge -A invenio_app.celery -f
# Clean redis
pipenv run invenio shell --no-term-title -c "import redis; redis.StrictRedis.from_url(app.config['CACHE_REDIS_URL']).flushall(); print('Cache cleared')"
pipenv run invenio db destroy --yes-i-know
pipenv run invenio db init create
pipenv run invenio index queue purge delete
set -e
pipenv run invenio index destroy --force --yes-i-know
# Override index init to load templates before mapping
pipenv run invenio utils init --force
# pipenv run invenio index init --force
pipenv run invenio index queue init
# Delete invenio_circulations index
pipenv run invenio index delete loans-loan-v1.0.0 --force --yes-i-know

# Create admin role to restrict access
pipenv run invenio roles create admin
pipenv run invenio access allow superuser-access role admin

# create new user
pipenv run invenio users create -a admin@rero.ch --password administrator

# confirm users
pipenv run invenio users confirm admin@rero.ch

# create roles
pipenv run invenio roles create -d "Admins Group" admins
pipenv run invenio roles create -d "Super Users Group" superusers

# create a role for users qualified as a patron
pipenv run invenio roles create -d "Patron" patron

# create a role for users qualified as a staff library
pipenv run invenio roles create -d "Librarian" librarian

# create a role for users qualified as a System librarian
pipenv run invenio roles create -d "System Librarian" system_librarian

# grant accesses to action roles
pipenv run invenio access allow admin-access role admins
pipenv run invenio access allow superuser-access role superusers

# grant roles to users
pipenv run invenio roles add admin@rero.ch admins
pipenv run invenio roles add admin@rero.ch superusers

echo -e ${GREEN}Organisations:${NC}
pipenv run invenio fixtures create --pid_type org ${DATA_PATH}/organisations.json
pipenv run invenio index reindex -t org --yes-i-know
echo -e ${GREEN}Libraries:${NC}
pipenv run invenio fixtures create --pid_type lib ${DATA_PATH}/libraries.json
pipenv run invenio index reindex -t lib --yes-i-know
echo -e ${GREEN}Locations:${NC}
pipenv run invenio fixtures create --pid_type loc ${DATA_PATH}/locations.json
pipenv run invenio index reindex -t loc --yes-i-know
echo -e ${GREEN}Item types:${NC}
pipenv run invenio fixtures create --pid_type itty ${DATA_PATH}/item_types.json
pipenv run invenio index reindex -t itty --yes-i-know
echo -e ${GREEN}Patron types:${NC}
pipenv run invenio fixtures create --pid_type ptty ${DATA_PATH}/patron_types.json
pipenv run invenio index reindex -t ptty --yes-i-know
echo -e ${GREEN}Circulation policies:${NC}
pipenv run invenio fixtures create --pid_type cipo ${DATA_PATH}/circulation_policies.json
pipenv run invenio index reindex -t cipo --yes-i-know
pipenv run invenio index run --raise-on-error

pipenv run invenio fixtures import_users ${DATA_PATH}/users.json -v

# # to generate data file
# pipenv run invenio fixtures create_items -c 10000 -i 5 ${DATA_PATH}/items.json
# # Marc to xml transformation
# yaz-marcdump -o marcxml data/10k.mrc > data/10k.xml
# # xml to json transformation for rero marcxml records
# pipenv run dojson -i ${DATA_PATH}/10k.xml -l marcxml -d pjson do marc21tojson > ${DATA_PATH}/10k.json
# pipenv run dojson -i ${DATA_PATH}/300.xml -l marcxml -d pjson do marc21tojson > ${DATA_PATH}/300.json
if [ "$1" = "--deployment" ]
then
    DOCUMENTS=${DATA_PATH}/10k.json
    ITEMS=${DATA_PATH}/items10k.json
else
    DOCUMENTS=${DATA_PATH}/300.json
    ITEMS=${DATA_PATH}/items300.json

fi

echo -e ${GREEN}Documents:${NC} ${DOCUMENTS}
pipenv run invenio fixtures create --pid_type doc --schema 'http://ils.rero.ch/schema/documents/document-v0.0.1.json' ${DOCUMENTS}

# create items
# NEEDS item type !!!
# to generate 10k items file 10k documents must exist in DB
# pipenv run invenio fixtures create_items -i 5 ${DATA_PATH}/items10k.json
# to generate 300 items file 300 documents must exist in DB
# pipenv run invenio fixtures create_items -i 5 ${DATA_PATH}/items300.json
echo -e ${GREEN}Items:${NC} ${ITEMS}
pipenv run invenio fixtures create --pid_type item --schema 'http://ils.rero.ch/schema/items/item-v0.0.1.json' ${ITEMS}


pipenv run invenio index reindex -t item --yes-i-know
pipenv run invenio index run -c 4 --raise-on-error
pipenv run invenio index reindex -t doc --yes-i-know
pipenv run invenio index run -c 4 --raise-on-error

# # create circulation transactions
echo -e ${GREEN}Circulation transactions:${NC}
pipenv run invenio fixtures create_loans ${DATA_PATH}/loans.json

# # OAI configuration
pipenv run invenio oaiharvester initconfig ${DATA_PATH}/oaisources.yml
if [ "$1" = "--deployment" ]
then
    # start oai harvesting asynchrone: beats must be running
    pipenv run invenio oaiharvester harvest -n ebooks -q -k
else
    echo -e ${GREEN}For ebooks harvesting run:${NC} pipenv run invenio oaiharvester harvest -n ebooks -a max=100 -q
fi

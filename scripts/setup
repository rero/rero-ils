#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# RERO ILS
# Copyright (C) 2019 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

DATA_PATH=./data

# Parameters description:
#  --create_items_holdings_small:
#       used for create only the items and holdings files for the 'small' documents file
#  --create_items_holdings_big:
#       used for create only the items and holdings files for the 'big' documents file
#  --deployment:
#       used for deploy the 'big' files
#  --dont_stop:
#       used for continue script on error
#  --time:
#       used for checking time for each command

# COLORS for messages
NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

invert_warning_option() {
  if ${ENABLE_WARNINGS}
  then
    ENABLE_WARNINGS=false
  else
    ENABLE_WARNINGS=true
  fi
}


DEPLOYMENT=false
LOADPERSONS=false
CREATE_ITEMS_HOLDINGS_SMALL=false
CREATE_ITEMS_HOLDINGS_BIG=false
STOP_EXECUTION=true
CREATE_LAZY=""
DONT_STOP=""
PREFIX=""
ES_MAPPING=false
ENQUEUE=""
# Permit user to set it with system var. Default is true.
ENABLE_WARNINGS=${ENABLE_WARNINGS:=true}

# Displays program name
msg "PROGRAM: ${PROGRAM}"

# POETRY is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  error_msg+exit "Error - Launch this script via poetry command:\n\tpoetry run ${PROGRAM}"
fi

# options may be followed by one colon to indicate they have a required argument
if ! options=$(getopt -o dPsbclptmwkD: -l deployment,persons,create_items_holdings_small,create_items_holdings_big,lazy,pursue,time,es-mapping,warnings,enqueue,data_path: -- "$@")
then
    # something went wrong, getopt will put out an error message for us
    exit 1
fi

while [ $# -gt 0 ]
do
    case $1 in
    -d|--deployment)
      DEPLOYMENT=true
      ;;
    -P|--persons)
      LOADPERSONS=true
      ;;
    -s|--create_items_holdings_small)
      CREATE_ITEMS_HOLDINGS_SMALL=true
      ;;
    -b|--create_items_holdings_big)
      CREATE_ITEMS_HOLDINGS_BIG=true
      ;;
    -c|--continue)
      STOP_EXECUTION=false
      ;;
    -l|--lazy)
      CREATE_LAZY="--lazy"
      ;;
    -p|--pursue)
      DONT_STOP="--dont-stop"
      ;;
    -t|--time)
      PREFIX="time"
      ;;  # Get time for all commands
    -m|--es-mapping)
      ES_MAPPING=true
      ;;
    -w|--warnings)
      invert_warning_option
      ;;
    -k|--enqueue)
      ENQUEUE="--enqueue --wait"
      ;;
    -D|--data_path)
      DATA_PATH=$2
      shift
      ;;
    (--) shift; break;;
    (-*) error_msg+exit "$0: Unrecognized option $1";;
    (*) break;;
    esac
    shift
done

if [[ ! -d "${DATA_PATH}" ]]; then
    error_msg+exit "Error - data path does not exist: ${DATA_PATH}"
fi

if ${CREATE_ITEMS_HOLDINGS_SMALL} && ${CREATE_ITEMS_HOLDINGS_BIG}
then
    error_msg+exit "Choose option for 'small' or 'big' documents generation"
fi

if ${CREATE_ITEMS_HOLDINGS_SMALL} || ${CREATE_ITEMS_HOLDINGS_BIG}
then
    if ${DEPLOYMENT}
    then
        error_msg+exit "Choose deployment option only"
    fi
fi

if ${CREATE_ITEMS_HOLDINGS_BIG}
then
    # set DEPLOYMENT to true in order to use big documents file
    DEPLOYMENT=true
fi

if ! ${ENABLE_WARNINGS}
then
    # Disables different warnings from used applications
    # --------------------------------------------------
    # avoid Python deprecation warnings
    export PYTHONWARNINGS="ignore::DeprecationWarning"
fi

# Purge celery
info_msg "Purge celery"
celery purge -A rero_ils.celery -f
# Clean redis
info_msg "Clean redis"
eval "${PREFIX} invenio shell --no-term-title -c \"import redis; redis.StrictRedis.from_url(app.config['CACHE_REDIS_URL']).flushall(); print('Cache cleared')\""
eval ${PREFIX} invenio scheduler init -r

eval ${PREFIX} invenio db destroy --yes-i-know
eval ${PREFIX} invenio db init create
eval ${PREFIX} invenio index queue purge delete
set -e
eval ${PREFIX} invenio index destroy --force --yes-i-know
# Override index init to load templates before mapping
# TODO: check if invenio index init --force works (to delete utils init --force)
info_msg "Override index init to load templates before mapping"
eval ${PREFIX} invenio utils init --force
# eval ${PREFIX} invenio index init --force
eval ${PREFIX} invenio index queue init
# Delete invenio_circulations index
info_msg "Delete invenio_circulations index"
eval ${PREFIX} invenio index delete loans-loan-v1.0.0 --force --yes-i-know

if ${ES_MAPPING}
then
    info_msg "ES mappings:"
    mkdir -p tmp
    invenio utils dump_es_mappings -o tmp/mapping_before_setup.txt
fi

# Create admin role to restrict access
info_msg "Create admin role to restrict access"
eval ${PREFIX} invenio roles create admin
eval ${PREFIX} invenio access allow superuser-access role admin

# create new user
info_msg "Create new admin user"
eval ${PREFIX} invenio users create -a admin@rero.ch --password administrator
eval ${PREFIX} invenio users create -a editor@rero.ch --password editor

info_msg "Create document_importer user"
eval ${PREFIX} invenio users create -a gipi@ngscan.com --password ngscan

# confirm users
info_msg "Confirm admin creation"
eval ${PREFIX} invenio users confirm admin@rero.ch
eval ${PREFIX} invenio users confirm editor@rero.ch
eval ${PREFIX} invenio users confirm gipi@ngscan.com

# create roles
info_msg "Create roles: admin, patron, librarian and system librarian"
eval "${PREFIX} invenio roles create -d 'Admins Group' admins"
eval "${PREFIX} invenio roles create -d 'Super Users Group' superusers"
# create a role for users qualified as a patron
eval "${PREFIX} invenio roles create -d 'Patron' patron"

# create a role for users qualified as a staff library
eval "${PREFIX} invenio roles create -d 'Librarian' librarian"

# create a role for users qualified as a System librarian
eval "${PREFIX} invenio roles create -d 'System Librarian' system_librarian"

# create a role for users qualified as a Documentation Editor
eval "${PREFIX} invenio roles create -d 'Documentation Editor' editor"

# create a role for users qualified as a Documment Importing
eval "${PREFIX} invenio roles create -d 'Documment Importing' document_importer"

# grant accesses to action roles
info_msg "Grant access to action roles (admins, superusers)"
eval ${PREFIX} invenio access allow admin-access role admins
eval ${PREFIX} invenio access allow superuser-access role superusers

# grant roles to users
info_msg "Grant roles to users"
eval ${PREFIX} invenio roles add admin@rero.ch admins
eval ${PREFIX} invenio roles add admin@rero.ch superusers
eval ${PREFIX} invenio roles add editor@rero.ch editor
eval ${PREFIX} invenio roles add gipi@ngscan.com document_importer

# Generate fixtures
info_msg "Generate fixtures:"

info_msg "- Organisations ${DATA_PATH}/organisations.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type org ${DATA_PATH}/organisations.json --append ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t org --yes-i-know --no-info

info_msg "- Libraries: ${DATA_PATH}/libraries.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type lib ${DATA_PATH}/libraries.json --append ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t lib --yes-i-know --no-info

info_msg "- Locations: ${DATA_PATH}/locations.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type loc ${DATA_PATH}/locations.json  --append ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t loc --yes-i-know --no-info

info_msg "- Item types: ${DATA_PATH}/item_types.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type itty ${DATA_PATH}/item_types.json  --append ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t itty --yes-i-know --no-info

info_msg "- Patron types: ${DATA_PATH}/patron_types.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type ptty ${DATA_PATH}/patron_types.json --append ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t ptty --yes-i-know --no-info

info_msg "- Circulation policies: ${DATA_PATH}/circulation_policies.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type cipo ${DATA_PATH}/circulation_policies.json --append ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t cipo --yes-i-know --no-info
eval ${PREFIX} invenio utils runindex --raise-on-error

info_msg "- Users: ${DATA_PATH}/users.json"
eval ${PREFIX} invenio fixtures import_users ${DATA_PATH}/users.json -v

#: - xml to json transformation for rero marcxml --------------------------------
#: don't forget to recreat the documents json schema files:
# SIZE=big # SIZE=small
# export RERO_ILS_MEF_HOST=mef.test.rero.ch
# invenio utils marc21tojson ${DATA_PATH}/documents_${SIZE}.xml ${DATA_PATH}/documents_${SIZE}.json ${DATA_PATH}/documents_${SIZE}_errors.xml -v -r
#: after recreation and loading of the new documents we have to recreate the person file
# invenio utils export -p pers -o ${DATA_PATH}/persons_${SIZE}.json -v

if ${DEPLOYMENT}
then
    DOCUMENTS=${DATA_PATH}/documents_big.json
    ITEMS=${DATA_PATH}/items_big.json
    HOLDINGS=${DATA_PATH}/holdings_big.json
    PERSONS=${DATA_PATH}/persons_big.json
else
    DOCUMENTS=${DATA_PATH}/documents_small.json
    ITEMS=${DATA_PATH}/items_small.json
    HOLDINGS=${DATA_PATH}/holdings_small.json
    PERSONS=${DATA_PATH}/persons_small.json
fi

if ${LOADPERSONS}
then
    info_msg "- PERSONS: ${DOCUMENTS} ${CREATE_LAZY} ${DONT_STOP}"
    eval ${PREFIX} invenio fixtures create --pid_type pers --schema 'http://ils.rero.ch/schemas/persons/person-v0.0.1.json' ${PERSONS} --append ${CREATE_LAZY} ${DONT_STOP}
    info_msg "Indexing Persons:"
    eval ${PREFIX} invenio utils reindex -t pers --yes-i-know --no-info
    eval ${PREFIX} invenio utils runindex --raise-on-error
else
    info_msg "- Persons from MEF: ${DOCUMENTS} ${CREATE_LAZY} ${ENQUEUE}"
    eval ${PREFIX} invenio fixtures get_all_mef_records ${DOCUMENTS} ${CREATE_LAZY} ${ENQUEUE}
fi

info_msg "- Documents: ${DOCUMENTS} ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type doc --schema 'http://ils.rero.ch/schemas/documents/document-v0.0.1.json' ${DOCUMENTS} --append ${CREATE_LAZY} ${DONT_STOP}

if ${CREATE_ITEMS_HOLDINGS_SMALL}
then
    # to generate small items file small documents must exist in DB
    msg "\tSMALL documents, creation of items and holdings"
    eval ${PREFIX} invenio fixtures create_items -i 3 -t ${DATA_PATH}/items_small.json -h ${DATA_PATH}/holdings_small.json
    success_msg "Creation of items and holdings done for 'small' documents."
    if ${STOP_EXECUTION}
    then
        exit 0
    fi
fi

if ${CREATE_ITEMS_HOLDINGS_BIG}
then
    # to generate big items file big documents must exist in DB
    msg "\tBIG documents, creation of items and holdings"
    eval ${PREFIX} invenio fixtures create_items -i 3 -t ${DATA_PATH}/items_big.json -h ${DATA_PATH}/holdings_big.json
    success_msg "Creation of items and holdings done for 'big' documents."
    if ${STOP_EXECUTION}
    then
        exit 0
    fi
fi

info_msg "- Holdings: ${HOLDINGS} ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type hold --schema 'http://ils.rero.ch/schemas/holdings/holding-v0.0.1.json' ${HOLDINGS} --append ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t hold --yes-i-know --no-info
eval ${PREFIX} invenio utils runindex --raise-on-error

info_msg "- Items: ${ITEMS} ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type item --schema 'http://ils.rero.ch/schemas/items/item-v0.0.1.json' ${ITEMS} --append ${CREATE_LAZY} ${DONT_STOP}

# index items
eval ${PREFIX} invenio utils reindex -t item --yes-i-know --no-info
eval ${PREFIX} invenio utils runindex --raise-on-error

# index documents
eval ${PREFIX} invenio utils reindex -t doc --yes-i-know --no-info
eval ${PREFIX} invenio utils runindex --raise-on-error

# index persons
# We have to reindex persons to get the oraganisations pids indexed correctly.
eval ${PREFIX} invenio utils reindex -t pers --yes-i-know --no-info
eval ${PREFIX} invenio utils runindex --raise-on-error

# create serials patterns
info_msg "Serials patterns: ${DATA_PATH}/patterns.json"
eval ${PREFIX} invenio fixtures create_patterns ${DATA_PATH}/patterns.json

# # ACQUISITION
# create vendors
info_msg "Acquisition vendors: ${DATA_PATH}/vendors.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type vndr ${DATA_PATH}/vendors.json --append  ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t vndr --yes-i-know --no-info

# create library budgets
info_msg "Library budgets: ${DATA_PATH}/budgets.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type budg ${DATA_PATH}/budgets.json --append  ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t budg --yes-i-know --no-info

# create acquisition accounts
info_msg "Acquisition accounts: ${DATA_PATH}/acq_accounts.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create --pid_type acac ${DATA_PATH}/acq_accounts.json --append  ${CREATE_LAZY} ${DONT_STOP}
eval ${PREFIX} invenio utils reindex -t acac --yes-i-know --no-info

eval ${PREFIX} invenio utils runindex --raise-on-error

# create circulation transactions
info_msg "Circulation transactions: ${DATA_PATH}/loans.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create_loans ${DATA_PATH}/loans.json

# process notifications
eval ${PREFIX} invenio notifications process

# create token access for ngscan (ezpump)
# if the environement variable INVENIO_RERO_ACCESS_TOKEN_NGSCAN is not set a new
# token will be generated
info_msg "Create token for: gipi@ngscan.com"
if [ -z ${INVENIO_RERO_ACCESS_TOKEN_NGSCAN}]
then
    eval ${PREFIX} invenio utils tokens_create -n ezpump -u gipi@ngscan.com
else
    eval ${PREFIX} invenio utils tokens_create -n ezpump -u gipi@ngscan.com -t ${INVENIO_RERO_ACCESS_TOKEN_NGSCAN}
fi

# # OAI configuration
info_msg "OAI configuration: ${DATA_PATH}/oaisources.yml"
eval ${PREFIX} invenio oaiharvester initconfig ${DATA_PATH}/oaisources.yml
if ${DEPLOYMENT}
then
    eval ${PREFIX} invenio scheduler enable_tasks -a -v
    # start oai harvesting asynchrone: beats must be running
    info_msg "Start OAI harvesting asynchrone"
    eval ${PREFIX} invenio oaiharvester harvest -n ebooks -q -k
else
    eval ${PREFIX} invenio scheduler enable_tasks -n bulk-indexer -n notification-creation -n accounts -n clear_and_renew_subscriptions -v
    info_msg "For ebooks harvesting run:"
    msg "\tinvenio oaiharvester harvest -n ebooks -a max=100 -q"
fi

if ${ES_MAPPING}
then
    info_msg "ES mappings:"
    invenio utils dump_es_mappings -o tmp/mapping_after_setup.txt
    error_msg "ES mapping differences:"
    diff --suppress-common-lines --side-by-side tmp/mapping_before_setup.txt tmp/mapping_after_setup.txt
fi

date
success_msg "Perfect ${PROGRAM}! See you soon…"
exit 0

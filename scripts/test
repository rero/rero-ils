#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# RERO ILS
# Copyright (C) 2019 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# COLORS for messages
NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`
SCRIPT_PATH=$(dirname "$0")

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

success_msg+exit() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}" && exit 0
}

pip_audit_exceptions=""
add_exceptions() {
  pip_audit_exceptions="$pip_audit_exceptions --ignore-vuln $1"""
}

# Displays program name
msg "PROGRAM: ${PROGRAM}"

# Poetry is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  error_msg+exit "Error - Launch this script via poetry command:\n\t${PROGRAM}"
fi

function pretests () {
  info_msg "Check vulnerabilities:"
  # cryptography 43.0.3  GHSA-79v4-65xg-pq4g 44.0.1
  add_exceptions "GHSA-79v4-65xg-pq4g"
  # jsonpickle   1.4.2   GHSA-j66q-qmrc-89rx
  add_exceptions "GHSA-j66q-qmrc-89rx"
  # py           1.11.0  PYSEC-2022-42969
  add_exceptions "PYSEC-2022-42969"
  # selenium     3.141.0 PYSEC-2023-206      4.14.0
  add_exceptions "PYSEC-2023-206"
  # selenium     3.141.0 PYSEC-2022-43167    4.0.0
  add_exceptions "PYSEC-2022-43167"
  # werkzeug     2.2.3   PYSEC-2023-221      2.3.8,3.0.1
  add_exceptions "PYSEC-2023-221"
  # werkzeug     2.2.3   GHSA-2g68-c3qc-8985 3.0.3
  add_exceptions "GHSA-2g68-c3qc-8985"
  # werkzeug     2.2.3   GHSA-f9vj-2wh5-fj8j 3.0.6
  add_exceptions "GHSA-f9vj-2wh5-fj8j"
  # werkzeug     2.2.3   GHSA-q34m-jh98-gwm2 3.0.6
  add_exceptions "GHSA-q34m-jh98-gwm2"
  PIPAPI_PYTHON_LOCATION=`which python` pip-audit ${pip_audit_exceptions}
  info_msg "Check json:"
  invenio reroils utils check_json tests/data rero_ils/modules data
  info_msg "Check license:"
  invenio reroils utils check_license check_license_config.yml
  info_msg "Test pydocstyle:"
  pydocstyle rero_ils tests docs
  info_msg "Test isort:"
  isort --check-only --diff tests rero_ils
  info_msg "Test black:"
  black tests rero_ils tests --check
  info_msg "Test useless imports:"
  autoflake --recursive --remove-all-unused-imports --ignore-init-module-imports --check-diff --quiet .
  # info_msg "Check-manifest:"
  # TODO: check if this is required when rero-ils will be published
  # check-manifest --ignore ".travis-*,docs/_build*"
  info_msg "Sphinx-build:"
  sphinx-build -qnNW docs docs/_build/html
}

function tests () {
  info_msg "Tests All:"
  pytest
}

function tests_api () {
  info_msg "Tests API:"
  pytest ./tests/api
}
function tests_e2e () {
  info_msg "Tests E2E:"
  pytest ./tests/e2e
}
function tests_scheduler () {
  info_msg "Tests Scheduler:"
  pytest ./tests/scheduler
}
function tests_ui () {
  info_msg "Tests UI:"
  pytest ./tests/ui
}
function tests_unit () {
  info_msg "Tests Unit:"
  pytest ./tests/unit
}
function tests_external () {
  info_msg "Tests External:"
  pytest tests/api/test_external_services.py
}
function tests_other () {
  info_msg "Tests Other:"
  pytest ./tests/conftest.py ./tests/test_version.py ./tests/utils.py
}

if [ $# -eq 0 ]
  then
    set -e
    pretests
    tests
fi

if [ "$1" = "other" ]
  then
    set -e
    pretests
    tests_other
fi
if [ "$1" = "api" ]
  then
    set -e
    tests_api
fi
if [ "$1" = "e2e" ]
  then
    set -e
    tests_e2e
fi
if [ "$1" = "scheduler" ]
  then
    set -e
    tests_scheduler
fi
if [ "$1" = "ui" ]
  then
    set -e
    tests_ui
fi
if [ "$1" = "unit" ]
  then
    set -e
    tests_unit
fi
if [ "$1" = "external" ]
  then
    set -e
    tests_external
fi

success_msg+exit "Perfect ${PROGRAM} external! See you soonâ€¦"

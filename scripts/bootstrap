#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# RERO ILS
# Copyright (C) 2019 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

NC='\033[0m'            # Default color
COLORED='\033[1;97;44m' # Bold + white + blue background

set -e

msg() {
  echo -e "${COLORED}${EMPHASIS}[INFO]${NC}${COLORED}: ${1}${NC}" 1>&2
}

# The real bootstrap script starts 20 lines below ;-)
flags=()
deploy=false
cmd="pipenv sync"
ci=false
while test $# -gt 0; do
    case "$1" in
        --deploy)
            # We are probably inside travis, check for env variables
            deploy=true
            shift
            ;;
        --ci)
            # We are probably inside travis, check for env variables
            ci=true
            shift
            ;;
        *)
            # Use the flags that are passed to the script directly to install
            flags+=("$1")
            shift
            ;;
    esac
done

if ! $deploy || $ci ; then
    flags=("--dev")
fi

if ! $deploy ; then
    if $ci ; then
        cmd="pipenv install --skip-lock --sequential"
    fi
fi

# go generate a clean lock file
# pipenv --rm; pipenv install --sequential

# install the application and all the dependencies
msg "Install with command: ${cmd} ${flags[@]}"
${cmd} ${flags[@]}

# to avoid IPython dependency problem on Mac OS X
if [ "$(uname -s)" == "Darwin" ]; then
  msg "Install 'appnope' for Mac OS X"
  pipenv run pip install appnope
fi

# install assets utils
virtualenv_path=`pipenv --venv`
msg "Install npm assets utils in: ${virtualenv_path}"
pipenv run npm i npm@latest -g --prefix "${virtualenv_path}" && pipenv run npm install --prefix "${virtualenv_path}" --silent -g node-sass@4.9.0 clean-css@3.4.19 uglify-js@2.7.3 requirejs@2.2.0 @angular/cli@7.0.4 yarn

# collect static files and compile html/css assets
CWD=`pwd`
# build the angular ui application
msg "Build angular UI application"
cd ui; pipenv run yarn install --frozen-lockfile; pipenv run yarn run deploy

# install the npm dependencies
msg "Return to dir: ${CWD}"
cd ${CWD}
msg "Install npm dependencies"
pipenv run invenio npm
msg "Search static folder location"
static_folder=$(pipenv run invenio shell --no-term-title -c "print('static_folder:%s' % app.static_folder)"|grep static_folder| cut -d: -f2-)
msg "Install static folder npm dependencies in: ${static_folder}"
pipenv run npm install --prefix "${static_folder}"

# build the web assets
msg "Build web assets: collect"
pipenv run invenio collect -v
msg "Build web assets: check (build command)"
pipenv run invenio assets build

# compile json files (resolve $ref)
echo
pipenv run invenio utils compile_json rero_ils/modules/documents/jsonschemas/documents/document-minimal-v0.0.1_src.json -o rero_ils/modules/documents/jsonschemas/documents/document-minimal-v0.0.1.json
pipenv run invenio utils compile_json rero_ils/modules/documents/jsonschemas/documents/document-v0.0.1_src.json -o rero_ils/modules/documents/jsonschemas/documents/document-v0.0.1.json

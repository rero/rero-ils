#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# RERO ILS
# Copyright (C) 2019 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# COLORS for messages
NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

invert_warning_option() {
  if ${ENABLE_WARNINGS}
  then
    ENABLE_WARNINGS=false
  else
    ENABLE_WARNINGS=true
  fi
}


DATA_PATH=./data
CSV_PATH=./data
DEPLOYMENT=false
CREATE_LAZY=""
PREFIX=""
INDEX_PARALLEL=0

# Displays program name
msg "PROGRAM: ${PROGRAM}"

# POETRY is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  error_msg+exit "Error - Launch this script via poetry command:\n\tpoetry run ${PROGRAM}"
fi

# options may be followed by one colon to indicate they have a required argument
if ! options=$(getopt -o dltD:C:i: -l deployment,lazy,time,data_path:,csv_path:,index_parallel: -- "$@")
then
    # something went wrong, getopt will put out an error message for us
    exit 1
fi

while [ $# -gt 0 ]
do
    case $1 in
    -d|--deployment)
      DEPLOYMENT=true
      ;;
    -l|--lazy)
      CREATE_LAZY="--lazy"
      ;;
    -t|--time)
      PREFIX="time"
      ;;  # Get time for all commands
    -D|--data_path)
      DATA_PATH=$2
      shift
      ;;
    -C|--csv_path)
      CSV_PATH=$2
      shift
      ;;
    -i|--index_parallel)
      INDEX_PARALLEL=$2
      shift
      ;;
    (--) shift; break;;
    (-*) error_msg+exit "$0: Unrecognized option $1";;
    (*) break;;
    esac
    shift
done

if [[ ! -d "${DATA_PATH}" ]]; then
    error_msg+exit "Error - data path does not exist: ${DATA_PATH}"
fi

if [[ ! -d "${CSV_PATH}" ]]; then
    error_msg+exit "Error - csv path does not exist: ${CSV_PATH}"
fi

# Purge celery
info_msg "Purge celery"
celery --app rero_ils.celery purge -f
# Clean redis
info_msg "Clean redis"
eval "${PREFIX} invenio shell --no-term-title -c \"import redis; redis.StrictRedis.from_url(app.config['CACHE_REDIS_URL']).flushall(); print('Cache cleared')\""
eval ${PREFIX} invenio scheduler init -r

eval ${PREFIX} invenio db destroy --yes-i-know
eval ${PREFIX} invenio db init create
eval ${PREFIX} invenio index queue purge delete
set -e
eval ${PREFIX} invenio index destroy --force --yes-i-know
# Override index init to load templates before mapping
# TODO: check if invenio index init --force works (to delete utils init --force)
info_msg "Override index init to load templates before mapping"
eval ${PREFIX} invenio utils init_index --force
# eval ${PREFIX} invenio index init --force
eval ${PREFIX} invenio index queue init
# Delete invenio_circulations index
info_msg "Delete invenio_circulations index"
eval ${PREFIX} invenio index delete loans-loan-v1.0.0 --force --yes-i-know

# create roles
info_msg "Create roles"
eval ${PREFIX} "invenio roles create -d 'Admins Group' admin"
eval ${PREFIX} "invenio roles create -d 'Super Users Group' superuser"
eval ${PREFIX} "invenio roles create -d 'Monitoring Group' monitoring"
eval ${PREFIX} "invenio roles create -d 'Patron' patron"
eval ${PREFIX} "invenio roles create -d 'Librarian' librarian"
eval ${PREFIX} "invenio roles create -d 'System Librarian' system_librarian"
eval ${PREFIX} "invenio roles create -d 'Documentation Editor' editor"
eval ${PREFIX} "invenio roles create -d 'Documment Importing' document_importer"

# create users
info_msg "Create users"
eval ${PREFIX} invenio users create -a admin@rero.ch --password administrator
eval ${PREFIX} invenio users create -a editor@rero.ch --password editor
eval ${PREFIX} invenio users create -a monitoring@rero.ch --password monitor
eval ${PREFIX} invenio users create -a gipi@ngscan.com --password ngscan

# confirm users
info_msg "Confirm users"
eval ${PREFIX} invenio users confirm admin@rero.ch
eval ${PREFIX} invenio users confirm editor@rero.ch
eval ${PREFIX} invenio users confirm monitoring@rero.ch
eval ${PREFIX} invenio users confirm gipi@ngscan.com

# grant accesses to action roles
info_msg "Grant access to action roles"
eval ${PREFIX} invenio access allow superuser-access role admin
eval ${PREFIX} invenio access allow superuser-access role superuser
eval ${PREFIX} invenio access allow admin-access role admin

# grant roles to users
info_msg "Grant roles to users"
eval ${PREFIX} invenio roles add admin@rero.ch admin
eval ${PREFIX} invenio roles add admin@rero.ch superuser
eval ${PREFIX} invenio roles add admin@rero.ch monitoring
eval ${PREFIX} invenio roles add editor@rero.ch editor
eval ${PREFIX} invenio roles add monitoring@rero.ch monitoring
eval ${PREFIX} invenio roles add gipi@ngscan.com document_importer

# Generate fixtures
info_msg "Generate fixtures:"

info_msg "- Organisations ${CSV_PATH}/org_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load org ${CSV_PATH}/org_metadata.csv --reindex --verbose

info_msg "- Libraries: ${CSV_PATH}/lib_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load lib ${CSV_PATH}/lib_metadata.csv --reindex --verbose

info_msg "- Locations: ${CSV_PATH}/loc_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load loc ${CSV_PATH}/loc_metadata.csv --reindex --verbose

info_msg "- Item types: ${CSV_PATH}/itty_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load itty ${CSV_PATH}/itty_metadata.csv --reindex --verbose

info_msg "- Patron types: ${CSV_PATH}/ptty_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load ptty ${CSV_PATH}/ptty_metadata.csv --reindex --verbose

info_msg "- Circulation policies: ${CSV_PATH}/cipo_metadata.csv ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures bulk_load cipo ${CSV_PATH}/cipo_metadata.csv --reindex --verbose

info_msg "Acquisition vendors: ${CSV_PATH}/vndr_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load vndr ${CSV_PATH}/vndr_metadata.csv --reindex --verbose

if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils runindex -d -c ${INDEX_PARALLEL} --raise-on-error
fi
eval ${PREFIX} invenio utils runindex --raise-on-error
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils reindex_missing -t org -t lib -t loc -t itty -t ptty -t cipo -t vndr -v
fi

info_msg "- Users: ${DATA_PATH}/users.json"
eval ${PREFIX} invenio fixtures import_users ${DATA_PATH}/users.json -v --append

info_msg "- ILL requests: ${DATA_PATH}/ill_request.json"
eval ${PREFIX} invenio fixtures create_ill_requests -f ${DATA_PATH}/ill_requests.json
eval ${PREFIX} invenio utils reindex -t illr --yes-i-know --no-info

info_msg "- CONTRIBUTIONS: ${CONTRIBUTIONS} ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures bulk_load cont ${CSV_PATH}/cont_metadata.csv --verbose

info_msg "- Documents: ${CSV_PATH}/cont_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load doc ${CSV_PATH}/doc_metadata.csv --verbose

info_msg "- Holdings: ${CSV_PATH}/hold_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load hold ${CSV_PATH}/hold_metadata.csv --reindex --verbose
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils runindex -d -c ${INDEX_PARALLEL} --raise-on-error
fi
eval ${PREFIX} invenio utils runindex --raise-on-error
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils reindex_missing -t hold -v
fi

info_msg "- Items: ${CSV_PATH}/item_metadata.csv"
eval ${PREFIX} invenio fixtures bulk_load item ${CSV_PATH}/item_metadata.csv --reindex --verbose
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils runindex -d -c ${INDEX_PARALLEL} --raise-on-error
fi
eval ${PREFIX} invenio utils runindex --raise-on-error
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils reindex_missing -t item -v
fi

# index documents
eval ${PREFIX} invenio utils reindex -t doc --yes-i-know --no-info
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils runindex -d -c ${INDEX_PARALLEL} --raise-on-error
fi
eval ${PREFIX} invenio utils runindex --raise-on-error
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils reindex_missing -t doc -v
fi

# index contributions
# We have to reindex contributions to get the oraganisations pids indexed correctly.
eval ${PREFIX} invenio utils reindex -t cont --yes-i-know --no-info
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils runindex -d -c ${INDEX_PARALLEL} --raise-on-error
fi
eval ${PREFIX} invenio utils runindex --raise-on-error
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils reindex_missing -t cont -v
fi

info_msg "- Local fields ${DATA_PATH}/local_fields.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures bulk_load lofi ${CSV_PATH}/lofi_metadata.csv --reindex --verbose

# create serials patterns
info_msg "Serials patterns: ${DATA_PATH}/patterns.json"
eval ${PREFIX} invenio fixtures create_patterns ${DATA_PATH}/patterns.json

info_msg "- Collections: ${DATA_PATH}/collections.json"
eval ${PREFIX} invenio fixtures create_collections -f ${DATA_PATH}/collections.json
eval ${PREFIX} invenio utils reindex -t coll --yes-i-know --no-info

# # ACQUISITION
# create library budgets
info_msg "Library budgets: ${DATA_PATH}/budgets.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures bulk_load budg ${CSV_PATH}/budg_metadata.csv --reindex --verbose

# create acquisition accounts
info_msg "Acquisition accounts: ${DATA_PATH}/acq_accounts.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures bulk_load acac ${CSV_PATH}/acac_metadata.csv --reindex --verbose

# create resource templates
info_msg "Resource templates:"
eval ${PREFIX} invenio fixtures bulk_load tmpl ${CSV_PATH}/tmpl_metadata.csv --reindex --verbose

if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils runindex -d -c ${INDEX_PARALLEL} --raise-on-error
fi
eval ${PREFIX} invenio utils runindex --raise-on-error
if [ ${INDEX_PARALLEL} -gt 0 ]; then
    eval ${PREFIX} invenio utils reindex_missing -t lofi -t coll -t budg -t acac -t tmpl -v
fi

# create circulation transactions
info_msg "Circulation transactions: ${DATA_PATH}/loans.json ${CREATE_LAZY} ${DONT_STOP}"
eval ${PREFIX} invenio fixtures create_loans ${DATA_PATH}/loans.json

# process notifications
eval ${PREFIX} invenio notifications process

# create token access for monitoring
# if the environement variable INVENIO_RERO_ACCESS_TOKEN_MONITORING is not set
# a new token will be generated
info_msg "Create token for: monitoring@rero.ch"
if [ -z ${INVENIO_RERO_ACCESS_TOKEN_MONITORING} ]
then
    eval ${PREFIX} invenio utils tokens_create -n monitoring -u monitoring@rero.ch
else
    eval ${PREFIX} invenio utils tokens_create -n monitoring -u monitoring@rero.ch -t ${INVENIO_RERO_ACCESS_TOKEN_MONITORING}
fi

# create token access for ngscan (ezpump)
# if the environement variable INVENIO_RERO_ACCESS_TOKEN_NGSCAN is not set a new
# token will be generated
info_msg "Create token for: gipi@ngscan.com"
if [ -z ${INVENIO_RERO_ACCESS_TOKEN_NGSCAN} ]
then
    eval ${PREFIX} invenio utils tokens_create -n ezpump -u gipi@ngscan.com
else
    eval ${PREFIX} invenio utils tokens_create -n ezpump -u gipi@ngscan.com -t ${INVENIO_RERO_ACCESS_TOKEN_NGSCAN}
fi

# # OAI configuration
info_msg "OAI configuration: ${DATA_PATH}/oaisources.yml"
eval ${PREFIX} invenio oaiharvester initconfig ${DATA_PATH}/oaisources.yml
if ${DEPLOYMENT}
then
    eval ${PREFIX} invenio scheduler enable_tasks -a -v
    # start oai harvesting asynchrone: beats must be running
    info_msg "Start OAI harvesting asynchrone"
    eval ${PREFIX} invenio oaiharvester harvest -n ebooks -q -k
else
    eval ${PREFIX} invenio scheduler enable_tasks -n scheduler-timestamp -n bulk-indexer -n anonymize-loans -n claims-creation -n notification-creation -n accounts -n clear_and_renew_subscriptions -v
    info_msg "For ebooks harvesting run:"
    msg "\tinvenio oaiharvester harvest -n ebooks -a max=100 -q"
fi


info_msg "- Load Virtua operation logs: ${DATA_PATH}/operation_logs.json"
eval ${PREFIX} invenio fixtures migrate_virtua_operation_logs ${DATA_PATH}/operation_logs.json  ${CREATE_LAZY} ${DONT_STOP}

date
success_msg "Perfect ${PROGRAM}! See you soon…"
exit 0
